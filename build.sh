#!/bin/bash

# 脚本出错时立即退出
set -e

echo "🚀 开始构建规则..."

# -----------------
# 1. 定义规则源和目标路径
# -----------------
DIRECT_LISTS=(
    "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Apple/Apple.list"
    "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/ChinaMax/ChinaMax.list"
    "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/Lan/Lan.list"
)
PROXY_LISTS=(
    "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Shadowrocket/OpenAI/OpenAI.list"
)
# --- 这里是关键修改：使用了Johnshall仓库的一个可用Fork ---
REJECT_LIST_URL="https://raw.githubusercontent.com/flycatdev/Johnshall-Shadowrocket-ADBlock-Rules-Forever/master/Johnshall_ADBlock_File_For_Shadowrocket.conf"

SOURCE_DIR="./source"
DIRECT_DIR="$SOURCE_DIR/direct"
PROXY_DIR="$SOURCE_DIR/proxy"
REJECT_DIR="$SOURCE_DIR/reject"
FINAL_RULES_FILE="BCshadowrocket.conf"

mkdir -p $DIRECT_DIR $PROXY_DIR $REJECT_DIR

# -----------------
# 2. 下载所有规则列表 (增加严格错误检查)
# -----------------
echo "📥 正在下载规则列表..."

download_file() {
    local url=$1
    local output_path=$2
    echo "  -> 下载: $url"
    # 下载并检查HTTP状态码，只接受200 OK
    http_code=$(curl -L --connect-timeout 10 --retry 3 -o "$output_path" -w "%{http_code}" "$url")
    if [ "$http_code" -ne 200 ] || [ ! -s "$output_path" ]; then
        echo "::error::下载失败! URL: $url, HTTP Code: $http_code"
        # 清理不完整的文件
        rm -f "$output_path"
        exit 1
    fi
}

for url in "${DIRECT_LISTS[@]}"; do
    download_file "$url" "$DIRECT_DIR/$(basename "$url")"
done

for url in "${PROXY_LISTS[@]}"; do
    download_file "$url" "$PROXY_DIR/$(basename "$url")"
done

download_file "$REJECT_LIST_URL" "$REJECT_DIR/ADBlock.conf"

echo "✅ 所有规则列表下载完成。"

# -----------------
# 3. 合并规则到最终文件 (优化提取逻辑)
# -----------------
echo "🛠️ 正在合并规则..."

TEMP_RULES=$(mktemp)

echo "# Generated by project: https://github.com/gitblackcat23/BCshadowrocket-rules-GPTsplittunnel" > $TEMP_RULES

# 处理直连规则
echo -e "\n# DIRECT Rules" >> $TEMP_RULES
for file in $DIRECT_DIR/*.list; do
    # 过滤掉注释和空行，然后在每一行后面添加 ",DIRECT"，并处理CRLF换行符
    awk 'NF > 0 && !/^#/{print $0 ",DIRECT"}' "$file" | sed 's/\r$//' >> $TEMP_RULES
done

# 处理代理规则
echo -e "\n# PROXY Rules" >> $TEMP_RULES
for file in $PROXY_DIR/*.list; do
    # 过滤掉注释和空行，然后在每一行后面添加 ",V3 Static Residential"
    awk 'NF > 0 && !/^#/{print $0 ",V3 Static Residential"}' "$file" | sed 's/\r$//' >> $TEMP_RULES
done

# 处理广告/拒绝规则 (更稳健的提取方式)
echo -e "\n# REJECT Rules (from Johnshall's Fork)" >> $TEMP_RULES
# 从[Rule]行开始，到下一个[Section]行为止，只提取非注释和非空行
awk '/^\[Rule\]/{f=1;next} /^\[/{f=0} f && !/^\s*($|#)/{print}' "$REJECT_DIR/ADBlock.conf" | sed 's/\r$//' >> $TEMP_RULES

echo "✅ 规则合并完成。"

# -----------------
# 4. 生成最终的配置文件
# -----------------
echo "📝 正在生成最终配置文件: $FINAL_RULES_FILE"

BUILD_TIME=$(date -u +"%Y-%m-%d %H:%M:%S")

# 使用 sed 将处理好的规则内容插入到模板的占位符位置
sed -e "/# {{RULES_CONTENT}}/r $TEMP_RULES" -e "/# {{RULES_CONTENT}}/d" "template.conf" > temp_conf
# 替换构建时间占位符
sed "s/{{BUILD_TIME}}/$BUILD_TIME UTC/g" temp_conf > $FINAL_RULES_FILE

# 清理临时文件
rm $TEMP_RULES temp_conf

echo "🎉 构建成功！"
